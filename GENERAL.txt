TS=============================

In TypeScript, the as keyword is used for type assertions, while the : any syntax is used in variable declarations or function signatures to specify a variable or return type of "any."

yes:

} catch (err) {
  throw new Error(err as any);
}

no:

} catch (err) {
  throw new Error(err: any);
}

2//
---
Type Assertion (as):

Usage: Used to tell TypeScript that you, as the developer, know more about the type of a value than TypeScript does.

Where to use: Mainly used when you are dealing with situations where TypeScript cannot determine the type and you have more information about the type than TypeScript does.

Example:

let value: unknown = "Hello, TypeScript!";

// Type assertion using 'as'
let stringValue: string = (value as string).toUpperCase();


const d = 5;
Math.pow(1, d as number);

throw new Error(err as any);

----
Type Annotation (:):

Usage: Used to explicitly specify the type of a variable, function parameter, or return value.

Where to use: In variable declarations, function parameters, and function return types when you want to provide explicit type information.


// 3 dealing with async 

// export const useFetchUserInfo = async () => {
//   try {
//     const getCurrentUser = await axios.get(`${window.origin}/api/user/current`);
//     return getCurrentUser.data.user;
//   } catch (error) {
//     console.log('here is useFetchUserInfo:', error);
//     throw new Error(error as any);
//   }
// };

// then it should be called this way :
// useEffect(() => {
//   const asyncWrapper = async () => {
//     const data2 = await useFetchUserInfo();
//     console.log(data2);
//     setUserData(data2);
//   };

//   asyncWrapper();
// }, []);




//4

//-----
Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
Only outside of the useEffect
  useEffect(() => {
    const [ss, setSS] = useState(null);

    const asyncWrapper = async () => {
      const manageUser = await manageUserSession();
      setUserData(manageUser);
    };
    asyncWrapper();
  }, []);


//-----
Invalid hook call.
Ive called in useEffect with (await) like this : await manageUserSession(); but it wasnt async anymore doesnt return the promise. Second reason Ive used
useEffect in manageUserSession() but I forgot to change name to start with use useManageUserSession()

// useEffect(() => {
  //   const asyncWrapper = async () => {
  //     const manageUser = await manageUserSession();
  //     setUserData(manageUser);
  //   };
  //   asyncWrapper();
  // }, []);


//--------- many to many SQL


The table userToOrg you mentioned, often referred to as an association table or junction table, is used in database design to represent a many-to-many relationship between two entities. In your case, it helps model the relationship between users and organizations. Let's break down why you might need such a table:

Many-to-Many Relationship:

If a user can belong to many organizations and an organization can have many users, this is a many-to-many relationship.
In a relational database, directly storing all the related user IDs in the org table or all the related org IDs in the user table is not an efficient or normalized way to represent this relationship.
Normalization:

Using a separate table (userToOrg) helps in normalizing the database design, which is a best practice in relational databases.
Normalization helps avoid data redundancy and ensures that changes to the user or organization details only need to be made in one place.
Flexibility:

The userToOrg table provides flexibility in managing relationships. If, for example, you later need to store additional information about the relationship between a user and an organization (e.g., the date the user joined the organization), you can easily add more columns to the userToOrg table without modifying the existing user or org tables.
Queries:

Using a junction table makes it easier to perform queries related to the many-to-many relationship. For instance, you can easily find all organizations a user belongs to or all users belonging to a particular organization.
Here's a simplified example of what the userToOrg table might look like:

sql
Copy code
CREATE TABLE userToOrg (
    userID INT,
    orgID INT,
    PRIMARY KEY (userID, orgID),
    FOREIGN KEY (userID) REFERENCES user(userID),
    FOREIGN KEY (orgID) REFERENCES org(orgID)
);





//--------- then()

//Issue then dont stop the code, doesnt await it so the code continue to move
// I apologize for any confusion in my previous responses. I'd like to clarify that when you use .then() with an asynchronous function, the function itself is still asynchronous, and the code in the .then() block will execute once the asynchronous operation is complete. However, it won't prevent the subsequent code outside of the .then() block from executing immediately.

// export const useManageUserSession = () => {
//   const [sessionExistResult, setSessionExistResult] = useState(false);
//   doesSessionExist().then(res => setSessionExistResult(res));

//   if (sessionExistResult) {
//     return useLocalStorageSession();
//   }
//   return null;
// };





//--------- then()

Cant call hooks or custom hooks inside async functions.
We can work this out this way:


wrong
export const useManageUserSession = () => {
  const response = doesSessionExist().then(res =>
    res ? useLocalStorageSession() : null,
  );

  return response;
};



//--------- custom hooks

You cant call custom hooks outside of component top level 
like here :

 const HeaderMenu = () => {
  const action = () => {
    useSignOut();
  };

  return ()
 }

 or like this:
 useEffect(() => {
    useManageUserSession();
  }, []);


  
// custom hook cant be async 
// in order to use useLogout in on click, we need to return fun logoutAndCleanState without calling it (do like this:   return logoutAndCleanState;)
// So then in component we can normaly declare custom hook logoutAndCleanState in top layer of component without calling it (becuse we return logoutAndCleanState without ())
// Here how it will look like in component:

// const HeaderMenu = () => {
//   const logoutAndCleanState = useLogout();

//   const logoutHandler = () => {
//     logoutAndCleanState();
//   };
// }