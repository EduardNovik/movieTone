TS=============================

In TypeScript, the as keyword is used for type assertions, while the : any syntax is used in variable declarations or function signatures to specify a variable or return type of "any."

yes:

} catch (err) {
  throw new Error(err as any);
}

no:

} catch (err) {
  throw new Error(err: any);
}

2//
---
Type Assertion (as):

Usage: Used to tell TypeScript that you, as the developer, know more about the type of a value than TypeScript does.

Where to use: Mainly used when you are dealing with situations where TypeScript cannot determine the type and you have more information about the type than TypeScript does.

Example:

let value: unknown = "Hello, TypeScript!";

// Type assertion using 'as'
let stringValue: string = (value as string).toUpperCase();


const d = 5;
Math.pow(1, d as number);

throw new Error(err as any);

----
Type Annotation (:):

Usage: Used to explicitly specify the type of a variable, function parameter, or return value.

Where to use: In variable declarations, function parameters, and function return types when you want to provide explicit type information.


// 3 dealing with async 

// export const useFetchUserInfo = async () => {
//   try {
//     const getCurrentUser = await axios.get(`${window.origin}/api/user/current`);
//     return getCurrentUser.data.user;
//   } catch (error) {
//     console.log('here is useFetchUserInfo:', error);
//     throw new Error(error as any);
//   }
// };

// then it should be called this way :
// useEffect(() => {
//   const asyncWrapper = async () => {
//     const data2 = await useFetchUserInfo();
//     console.log(data2);
//     setUserData(data2);
//   };

//   asyncWrapper();
// }, []);




//4

//-----
Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
Only outside of the useEffect
  useEffect(() => {
    const [ss, setSS] = useState(null);

    const asyncWrapper = async () => {
      const manageUser = await manageUserSession();
      setUserData(manageUser);
    };
    asyncWrapper();
  }, []);


//-----
Invalid hook call.
Ive called in useEffect with (await) like this : await manageUserSession(); but it wasnt async anymore doesnt return the promise. Second reason Ive used
useEffect in manageUserSession() but I forgot to change name to start with use useManageUserSession()

// useEffect(() => {
  //   const asyncWrapper = async () => {
  //     const manageUser = await manageUserSession();
  //     setUserData(manageUser);
  //   };
  //   asyncWrapper();
  // }, []);
